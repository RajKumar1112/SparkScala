Question 1 : Consider list of tuples List ((1,"name1",2000.0),(2,"name2",50000.5),(3,"name3",50000.75),(4,"name4",40000.75),(5,"name5",50000.60)) transform into a list every name filled with uppercase & provide 10% bonus on the salary if salary is greater than 10000.00.

Solution:
val listEmp = ((1,"name1",2000.0),(2,"name2",3000.50),(3,"name3",50000.75),(4,"name4",40000.75),(5,"name5",50000.60))

val listTransformed = ((listEmp._1._1, listEmp._1._2.toUpperCase, (listEmp._1._3 > 10000.00) match 
{ case true => (listEmp._1._3 + (listEmp._1._3 * 0.1))
  case false => (listEmp._1._3)}), 
(listEmp._2._1, listEmp._2._2.toUpperCase, (listEmp._2._3 > 10000.00) match 
{ case true => (listEmp._2._3 + (listEmp._2._3 * 0.1)) 
  case false => (listEmp._2._3)}),
(listEmp._3._1, listEmp._3._2.toUpperCase, (listEmp._3._3 > 10000.00) match 
{ case true => (listEmp._3._3 + (listEmp._3._3 * 0.1)) 
  case false => (listEmp._3._3)}), 
(listEmp._4._1, listEmp._4._2.toUpperCase, (listEmp._4._3 > 10000.00) match 
{ case true => (listEmp._4._3 + (listEmp._4._3 * 0.1)) case false => (listEmp._4._3)}), 
(listEmp._5._1, listEmp._5._2.toUpperCase, (listEmp._5._3 > 10000.00) match 
{ case true => (listEmp._5._3 + (listEmp._5._3 * 0.1)) case false => (listEmp._5._3)}))



=====================================================
Question 2: Write a Scala Code Snippet that sums up 10 numbers starting from the number given by the users & return the same.
Solution 2:
def sumOfTen(x:Int):Int = {
val l = List.range(x, x+10)
l.sum
}
sumOfTen: (x: Int)Int
scala> sumOfTen(1)
res1: Int = 55
=====================================================
Question 3: Write the Output generated by the snippet
var x = 10
while(x <= 10){
if(x<=5)
println(x)
x= x+1
}
Solution : 3
scala> :paste
// Entering paste mode (ctrl-D to finish)
var x = 10
while(x <= 10){
if(x<=5)
println(x)
x= x+1
}
// Exiting paste mode, now interpreting.
x: Int = 11

====================================================
Question 4 : Display the count of numbers between 1 to 100 which are not divisible by 2,3 & 5.
Solution 4:
scala> :paste
// Entering paste mode (ctrl-D to finish)
var count = 0
for(i <- 1 to 100){
if((i%2 !=0) && (i%3 !=0) && (i%5 !=0)){
	count+=1
	print("\t"+i)
}
}
count
// Exiting paste mode, now interpreting.

1	7	11	13	17	19	23	29	31	37	41	43	47	49	53	59	61	67	71	73	77	79	83	89	91 count: Int = 26